{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#django-quotes","title":"Django Quotes","text":"<p>A simple reusable Django app that allows you to collect quotes from arbitrary groups of characters, and then serve random quotes or Markov-chain generated sentences based upon them. Includes a Bootstrap compatible set of templates an optional REST API.</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Documentation and a full test suite.</li> <li>Support for abstract grouping of quote sources.</li> <li>Convenience methods for fetching a random quote.</li> <li>Object-level permissions via django-rules.</li> <li>Generate sentences based off of a Markov-chain for individual sources and groups using natural language processing.</li> <li>Bootstrap-compatible templates.</li> <li>A simple REST API for fetching data via JSON with CORS support.</li> </ul> <p>Check out the documentation for installation and quickstart instructions.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#041","title":"0.4.1","text":"<p>Compare the full difference</p> <ul> <li>Some improvements to migrations to handle some upgrade use cases.</li> <li>Some type annotation improvements.</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<p>Compare the full difference</p> <ul> <li>Drops support for Python 3.9 and 3.10.</li> <li>Moves markov model management to django-markov.</li> <li>This replaces the current <code>SourceMarkovModel</code> and <code>GroupMakovModel</code> with <code>MarkovTextModel</code>.</li> <li>This replaces the <code>markov_sentence_generated</code> with <code>django-markov</code>'s <code>sentence_generated</code> signal.</li> <li>Migrations will transfer existing models to the new database tables and then remove the old one.<ul> <li>While no data loss is anticipated, if is highly recommended that you take a backup of your database prior to upgrading.</li> <li>If you'd still like to implement the migrations cautiously, you can run <code>python manage.py migrate django_quotes 0011</code> first to confirm that the data migrated safely. Then you can run <code>python manage.py migrate django_quotes 0012</code> to complete the upgrade and remove the old tables.</li> </ul> </li> <li>As <code>django-markov</code> makes heavy use of the newest async features, Django&gt;=5.0 is now required.</li> <li>Improved python module reference documentation.</li> <li>Add versioning to documentation.</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<p>Compare the full difference</p> <ul> <li>Security update: removes <code>py</code> from dependencies as no longer needed and has a vulnerability.</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<p>Compare the full difference</p> <ul> <li>Adds support for python 3.11 by upgrading <code>spacy</code> dependency to 3.4.2 and adding <code>py</code>.</li> </ul> <p>Upgrade Note: You will want to update your spacy language model after updating. You can do this by:</p> <pre><code>python -m spacy download en_core_web_sm\n</code></pre>"},{"location":"changelog/#030","title":"0.3.0","text":"<p>Compare the full difference</p> <ul> <li>Add <code>pub_date</code> field to <code>Quote</code> model. This prevents a quote with a future date from appearing in random requests.</li> </ul>"},{"location":"changelog/#024","title":"0.2.4","text":"<p>Compare the full difference</p> <ul> <li>Update documentation links on PyPI.</li> </ul>"},{"location":"changelog/#023","title":"0.2.3","text":"<p>Compare the full difference</p> <ul> <li>Bug: Fixed issue with pagination not showing accurate count for all objects.</li> <li>Bug: Fix page title when viewing a list of sources for a SourceGroup.</li> </ul>"},{"location":"changelog/#022","title":"0.2.2","text":"<p>Compare the full difference</p> <p>Update for latest mypy and fixes for documentation builds.</p>"},{"location":"changelog/#021","title":"0.2.1","text":"<p>Compare the full difference</p> <ul> <li>Enable type annotations with py.typed.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<p>Compare the full difference</p> <ul> <li><code>SourceGroups</code> no longer require a unique name (since users won't know what else is there anyway).</li> <li>New slug generation to ensure that slugs remain unique.</li> <li>It is no longer possible to specify a slug within a given create form for either <code>SourceGroup</code> or <code>Source</code> objects.</li> </ul>"},{"location":"changelog/#013","title":"0.1.3","text":"<p>Compare the full difference</p> <ul> <li>Adds a configuration option for controlling how many quotes should be retrieved for random quote selection from a   <code>SourceGroup</code>. To make use of this option, add the variable <code>MAX_QUOTES_FOR_RANDOM_GROUP_SET</code> to your project's   <code>settings.py</code>.</li> <li>Bugfix: <code>SourceGroup</code> random group selection now prioritizes quotes that have been served less often via the   <code>QuoteStats.times_used</code> value. This was already the case when selecting from a single <code>Source</code>, but the behavior   is now consistent for <code>SourceGroup</code> as well.</li> </ul>"},{"location":"changelog/#012","title":"0.1.2","text":"<ul> <li>Adds a configuration option for controlling how many quotes should be retrieved for random quote selection.   To make use of this option, add the variable <code>MAX_QUOTES_FOR_RANDOM_SET</code> in your project's <code>settings.py</code> file.</li> </ul>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at daniel@andrlik.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<p>Contributions to either the code, localization, or the documentation are very welcome!</p>"},{"location":"contributing/#development-task-runner","title":"Development task runner","text":"<p>We use <code>just</code> to execute common tasks. It is available for any platform. Once installed, you can see a list of available commands by running <code>just --list</code>.</p>"},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>We use <code>rye</code> to manage the Python dependencies. If you don't have <code>rye</code>, you should install with <code>just rye-install</code>.</p> <p>To install dependencies and prepare <code>pre-commit</code> hooks you would need to run the <code>setup</code> command:</p> <pre><code>just bootstrap\n</code></pre>"},{"location":"contributing/#running-updates","title":"Running updates","text":"<p>After pulling new updates from the repository you can quickly install updated dependencies and run database migrations by running <code>just bootstrap</code>.</p>"},{"location":"contributing/#codestyle","title":"Codestyle","text":"<p>After installation you may execute code formatting.</p> <pre><code>just fmt\n</code></pre>"},{"location":"contributing/#checks","title":"Checks","text":"<p>Many checks are configured for this project.</p> <p>To run your test suite:</p> <pre><code>just test\n</code></pre> <p>To use pyright for type checking run: <pre><code>just check-types\n</code></pre></p> <p>To run linting:</p> <pre><code>just lint\n</code></pre> <p>The <code>just safety</code> command will look at the security of your code.</p>"},{"location":"contributing/#before-submitting","title":"Before submitting","text":"<p>Before submitting your code please do the following steps:</p> <ol> <li>Add any changes you want</li> <li>Add tests for the new changes</li> <li>Edit documentation if you have changed something significant</li> <li>Run <code>just fmt</code> to format your changes.</li> <li>Run <code>just lint</code> to ensure that types, security and docstrings are okay.</li> <li>Add your name to the <code>CONTRIBUTERS.txt</code> file.</li> </ol>"},{"location":"contributing/#other-help","title":"Other help","text":"<p>You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Django-Quotes uses markovify in conjunction with natural language processing functions from spacy so installation and configuration requires some additional steps.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First install <code>django-quotes</code> using a tool like pip.</p> \ud83c\udf89 Look, it's the way you install almost every library!<pre><code>pip install django-quotes\n</code></pre> <p>Because we're using <code>spacy</code>, we also need to download the language model we are using, which is <code>en_core_web_trf</code>.<sup>1</sup> While there are a number of ugly ways to annotate this process, it's safer for you to do the installation directly using the following command.</p> It's an extra step because academia.<pre><code>python -m spacy download en_core_web_trf\n</code></pre>"},{"location":"quickstart/#configuration","title":"Configuration","text":""},{"location":"quickstart/#application-settings","title":"Application Settings","text":"<p>Now we need to configure our Django project to use <code>django-quotes</code>. Because we provide object-based permissions and a REST API, you'll also need to enable Django REST Framework and django-rules. Unless you plan on overriding the included templates, you should also include <code>crispy-forms</code>.</p> settings.py<pre><code>   # Number of quotes to fetch when doing random selections from a single source.\n   # Optional. Default is 50.\n   MAX_QUOTES_FOR_RANDOM_SET = 50\n\n   # Number of quotes to fetch when doing random selections from a SourceGroup.\n   # Optional. Default is 50.\n   MAX_QUOTES_FOR_RANDOM_GROUP_SET = 50\n\n   INSTALLED_APPS = [\n        \"django.contrib.auth\",\n        \"django.contrib.contenttypes\",\n        \"django.contrib.sessions\",\n        \"django.contrib.sites\",\n        \"django.contrib.messages\",\n        \"django.contrib.staticfiles\",\n        # \"django.contrib.humanize\", # Handy template tags\n        \"django.contrib.admin\",\n        \"django.forms\",\n        \"crispy_forms\",\n        \"rest_framework\",\n        \"rest_framework.authtoken\",\n        \"corsheaders\",\n        \"drf_spectacular\",\n        \"rules.apps.AutodiscoverRulesConfig\",\n        \"django_quotes\",\n        # Your stuff: custom apps go here\n    ]\n\n    # AUTHENTICATION\n    # ------------------------------------------------------------------------------\n    # https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends\n    AUTHENTICATION_BACKENDS = [\n        \"rules.permissions.ObjectPermissionBackend\",\n        \"django.contrib.auth.backends.ModelBackend\",\n    ]\n\n    # MIDDLEWARE\n    # ------------------------------------------------------------------------------\n    # https://docs.djangoproject.com/en/dev/ref/settings/#middleware\n    MIDDLEWARE = [\n        \"django.middleware.security.SecurityMiddleware\",\n        \"corsheaders.middleware.CorsMiddleware\",\n        \"django.contrib.sessions.middleware.SessionMiddleware\",\n        \"django.middleware.locale.LocaleMiddleware\",\n        \"django.middleware.common.CommonMiddleware\",\n        \"django.middleware.csrf.CsrfViewMiddleware\",\n        \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n        \"django.contrib.messages.middleware.MessageMiddleware\",\n        \"django.middleware.common.BrokenLinkEmailsMiddleware\",\n        \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    ]\n\n    # django-rest-framework\n    # -------------------------------------------------------------------------------\n    # django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\n    REST_FRAMEWORK = {\n        \"DEFAULT_AUTHENTICATION_CLASSES\": (\n            \"rest_framework.authentication.SessionAuthentication\",\n            \"rest_framework.authentication.TokenAuthentication\",\n        ),\n        \"DEFAULT_PERMISSION_CLASSES\": (\"rest_framework.permissions.IsAuthenticated\",),\n        \"DEFAULT_SCHEMA_CLASS\": \"drf_spectacular.openapi.AutoSchema\",\n    }\n\n    # django-cors-headers - https://github.com/adamchainz/django-cors-headers#setup\n    CORS_URLS_REGEX = r\"^/api/.*$\"\n\n    # By Default swagger ui is available only to admin user. You can change permission classs to change that\n    # See more configuration options at https://drf-spectacular.readthedocs.io/en/latest/settings.html#settings\n    SPECTACULAR_SETTINGS = {\n        \"TITLE\": \"Django Quotes API\",\n        \"DESCRIPTION\": \"Documentation of API endpoints of Django Quotes\",\n        \"VERSION\": \"1.0.0\",\n        \"SERVE_PERMISSIONS\": [\"rest_framework.permissions.IsAdminUser\"],\n        \"SERVERS\": [\n            {\"url\": \"https://127.0.0.1:8000\", \"description\": \"Local Development server\"},\n        ],\n    }\n</code></pre>"},{"location":"quickstart/#url-settings","title":"URL Settings","text":"<p>First, configure your API router.</p> api_router.py<pre><code>from django.conf import settings\nfrom rest_framework.routers import DefaultRouter, SimpleRouter\n\nfrom django_quotes.api.views import SourceGroupViewSet, SourceViewSet\n\nif settings.DEBUG:\n    router = DefaultRouter()\nelse:\n    router = SimpleRouter()\n\nrouter.register(\"groups\", SourceGroupViewSet, basename=\"group\")\nrouter.register(\"sources\", SourceViewSet, basename=\"source\")\n\n\napp_name = \"api\"\nurlpatterns = router.urls\n</code></pre> <p>Then you will need to wire up the views to your project URLs configuration as displayed below.</p> urls.py<pre><code>urlpatterns = [\n    # Chose whatever path your want, but keep the namespace as ``quotes``.\n    path(\"app/\", include(\"django_quotes.urls\", namespace=\"quotes\")),\n    # API base url. You can change this path if you like.\n    path(\"api/\", include(\"path.to.your.api_router\")),\n    # DRF auth token\n    path(\"auth-token/\", obtain_auth_token),\n    path(\"api/schema/\", SpectacularAPIView.as_view(), name=\"api-schema\"),\n    path(\n        \"api/docs/\",\n        SpectacularSwaggerView.as_view(url_name=\"api-schema\"),\n        name=\"api-docs\",\n    ),\n    # Insert your other URLS here.\n]\n</code></pre>"},{"location":"quickstart/#customizing-templates-optional","title":"Customizing Templates (Optional)","text":"<p>If you want to override the existing templates, you can. By default they are Bootstrap 5-compatible, although we do not bundle Bootstrap within the project. To override, create a <code>templates/quotes</code> directory in your project and add the following templates:</p> <pre><code>ls django_quotes/templates/quotes\n\ngroup_create.html\ngroup_delete.html\ngroup_detail.html\ngroup_list.html\ngroup_update.html\nquote_create.html\nquote_delete.html\nquote_detail.html\nquote_list.html\nquote_update.html\nsource_create.html\nsource_delete.html\nsource_detail.html\nsource_list.html\nsource_update.html\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":"<p>By default, django-quotes provides access via the admin site, and provides a set of basic views for managing the quotes and associated data. </p> <ol> <li> <p>Other languages are not supported at this time.\u00a0\u21a9</p> </li> </ol>"},{"location":"security/","title":"Security","text":""},{"location":"security/#security","title":"Security","text":""},{"location":"security/#reporting-security-issues","title":"\ud83d\udd10 Reporting Security Issues","text":"<p>Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge.</p> <p>Vulnerabilities can be reported by emailing core members:</p> <ul> <li>Daniel Andrlik daniel@andrlik.org</li> </ul> <p>Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:</p> <ul> <li>Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)</li> <li>Full paths of source file(s) related to the manifestation of the issue</li> <li>The location of the affected source code (tag/branch/commit or direct URL)</li> <li>Any special configuration required to reproduce the issue</li> <li>Environment (e.g. Linux / Windows / macOS)</li> <li>Step-by-step instructions to reproduce the issue</li> <li>Proof-of-concept or exploit code (if possible)</li> <li>Impact of the issue, including how an attacker might exploit the issue</li> </ul> <p>This information will help us triage your report more quickly.</p>"},{"location":"security/#preferred-languages","title":"Preferred Languages","text":"<p>We prefer all communications to be in English.</p>"},{"location":"reference/django_quotes/admin/","title":"admin","text":""},{"location":"reference/django_quotes/admin/#src.django_quotes.admin.GroupStatsAdmin","title":"GroupStatsAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for GroupStats</p>"},{"location":"reference/django_quotes/admin/#src.django_quotes.admin.QuoteAdmin","title":"QuoteAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for Quote.</p>"},{"location":"reference/django_quotes/admin/#src.django_quotes.admin.QuoteStatAdmin","title":"QuoteStatAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for QuoteStats</p>"},{"location":"reference/django_quotes/admin/#src.django_quotes.admin.SourceAdmin","title":"SourceAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for Source.</p>"},{"location":"reference/django_quotes/admin/#src.django_quotes.admin.SourceGroupAdmin","title":"SourceGroupAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for SourceGroup.</p>"},{"location":"reference/django_quotes/admin/#src.django_quotes.admin.SourceStatAdmin","title":"SourceStatAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for SourceStats</p>"},{"location":"reference/django_quotes/apps/","title":"apps","text":""},{"location":"reference/django_quotes/apps/#src.django_quotes.apps.QuotesConfig","title":"QuotesConfig","text":"<p>             Bases: <code>AppConfig</code></p> <p>App configuration for django_quotes app. Notably loads the receivers so that signals will be processed.</p>"},{"location":"reference/django_quotes/apps/#src.django_quotes.apps.QuotesConfig.ready","title":"ready","text":"<pre><code>ready()\n</code></pre> <p>Load the receivers.</p> Source code in <code>src/django_quotes/apps.py</code> <pre><code>def ready(self):\n    \"\"\"Load the receivers.\"\"\"\n    try:\n        import django_quotes.receivers  # noqa F401\n    except ImportError:  # pragma: nocover\n        pass\n</code></pre>"},{"location":"reference/django_quotes/models/","title":"models","text":""},{"location":"reference/django_quotes/models/#src.django_quotes.models.AbstractOwnerModel","title":"AbstractOwnerModel","text":"<p>             Bases: <code>Model</code></p> <p>Abstract model for representing an entity owned by a user with toggles for either allowing submissions for it and public access. Defaults to completely private by default.</p> <p>Attributes:</p> Name Type Description <code>public</code> <code>bool</code> <p>is this object public to any authenticated user? Default: False</p> <code>allow_submissions</code> <code>bool</code> <p>allow other users to submit child objects? Default: False. Not implemented yet.</p> <code>owner</code> <code>User</code> <p>The user that created this object.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.GroupStats","title":"GroupStats","text":"<p>             Bases: <code>TimeStampedModel</code></p> <p>An object for using to track usage stats for <code>CharacterGroup</code>.</p> <p>Attributes:</p> Name Type Description <code>group</code> <code>SourceGroup</code> <p>The group this is collecting stats for.</p> <code>quotes_requested</code> <code>int</code> <p>The number of times a quote from this object or its children has been requested.</p> <code>quotes_generated</code> <code>int</code> <p>The number of times a markov quote has been generated for this or it's children.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Quote","title":"Quote","text":"<p>             Bases: <code>AbstractOwnerModel</code>, <code>RulesModelMixin</code>, <code>TimeStampedModel</code></p> <p>A quote from a given source. A user must own the related source to add or delete a quote.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Database primary key for the object.</p> <code>quote</code> <code>str</code> <p>The quote text to use. You can use Markdown for styling. Must be &lt;= 280 characters for tweets</p> <code>quote_rendered</code> <code>str</code> <p>HTML rendered version of the quote field. Automatically generated.</p> <code>citation</code> <code>str</code> <p>Optional description of quote source, e.g. episode number or book title.</p> <code>citation_url</code> <code>str</code> <p>Optional accompanying URL for the citation.</p> <code>character</code> <code>Source</code> <p>The source of this quote.</p> <code>owner</code> <code>User</code> <p>The user that created and owns this quote.</p> <code>created</code> <code>datetime</code> <p>When this object was first created. Auto-generated.</p> <code>modified</code> <code>datetime</code> <p>Last time this object was modified. Auto-generated.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.QuoteStats","title":"QuoteStats","text":"<p>             Bases: <code>TimeStampedModel</code></p> <p>A simple object used to track how often an individual quote is used.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The database primary key of this object.</p> <code>quote</code> <code>Quote</code> <p>The quote this stat relates to.</p> <code>times_used</code> <code>int</code> <p>The number of times this has been used by an service such as random quote.</p> <code>created</code> <code>datetime</code> <p>When this was created.</p> <code>modified</code> <code>datetime</code> <p>When this was last modified.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source","title":"Source","text":"<p>             Bases: <code>AbstractOwnerModel</code>, <code>RulesModelMixin</code>, <code>TimeStampedModel</code></p> <p>An individual source to attribute the quote to in the system, such as a character from a podcast/book, or a specific author. A user must be the owner of the related SourceGroup to add or delete a source.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Database primary key for the object.</p> <code>name</code> <code>str</code> <p>Unique name of a character within a <code>CharacterGroup</code> for this entity.</p> <code>group</code> <code>SourceGroup</code> <p>The parent <code>SourceGroup</code>.</p> <code>slug</code> <code>str</code> <p>Slug made up of a generated version of the character name and the group slug prefix.</p> <code>description</code> <code>str</code> <p>Description for the character. Markdown can be used for styling.</p> <code>description_rendered</code> <code>str</code> <p>HTML representation of the description for convenience. Automatically generated.</p> <code>allow_markov</code> <code>bool</code> <p>Allow markov quotes to be requested from this character? Default False.</p> <code>owner</code> <code>User</code> <p>The user that created and owns this character.</p> <code>public</code> <code>bool</code> <p>Is the character public to other users? Defaults to False.</p> <code>allow_submissions</code> <code>bool</code> <p>Allow other users to submit quotes for this character? Defaults to False.</p> <code>created</code> <code>datetime</code> <p>When this object was first created. Auto-generated.</p> <code>modified</code> <code>datetime</code> <p>Last time this object was modified. Auto-generated.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source.markov_ready","title":"markov_ready  <code>property</code>","text":"<pre><code>markov_ready: bool\n</code></pre> <p>Conducts sanity checks to see if requesting a markov chain is feasible. Markov must be enabled for a character and there must be a sufficient corpus to generate a sentence from. Currently set at a minimum of 10 quotes.</p> <p>Returns:</p> Type Description <code>bool</code> <p>If ready for markov requests.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source.aupdate_markov_model","title":"aupdate_markov_model  <code>async</code>","text":"<pre><code>aupdate_markov_model() -&gt; None\n</code></pre> <p>Process all quotes into the associated model.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>async def aupdate_markov_model(self) -&gt; None:\n    \"\"\"\n    Process all quotes into the associated model.\n    \"\"\"\n    if self.allow_markov and self.text_model is not None:\n        await self.text_model.aupdate_model_from_corpus(\n            corpus_entries=[quote.quote async for quote in self.quote_set.all()], char_limit=0, store_compiled=False\n        )\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source.get_markov_sentence","title":"get_markov_sentence","text":"<pre><code>get_markov_sentence(\n    max_characters: int | None = 280, tries: int = 20\n) -&gt; str | None\n</code></pre> <p>If valid, generate a markov sentence. If not, return None.</p> <p>Parameters:</p> Name Type Description Default <code>max_characters</code> <code>int | None</code> <p>Maximum number of characters allowed in resulting sentence.</p> <code>280</code> <code>tries</code> <code>int</code> <p>Number of times django_markov may try to generate sentence.</p> <code>20</code> <p>Returns:</p> Type Description <code>str | None</code> <p>The resulting sentence or None if a sentence could not be formed.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def get_markov_sentence(self, max_characters: int | None = 280, tries: int = 20) -&gt; str | None:\n    \"\"\"\n    If valid, generate a markov sentence. If not, return None.\n\n    Args:\n        max_characters (int | None): Maximum number of characters allowed in\n            resulting sentence.\n        tries (int): Number of times django_markov may try to generate sentence.\n\n    Returns:\n        (str | None): The resulting sentence or None if a sentence could not be formed.\n    \"\"\"\n    if not max_characters:  # no cov\n        max_characters = 280\n    logger.debug(\"Checking to see if character is markov ready...\")\n    if self.markov_ready and self.text_model is not None:\n        logger.debug(\"It IS ready. Fetching markov model.\")\n        markov_model = self.text_model\n        if not markov_model.is_ready:\n            logger.debug(\"No model defined yet, generating...\")\n            self.update_markov_model()\n        logger.debug(\"Markov text model loaded. Generating sentence.\")\n        sentence: str | None = markov_model.generate_sentence(char_limit=max_characters, tries=tries)\n        if sentence is not None:\n            return sentence\n    return None\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source.get_random_quote","title":"get_random_quote","text":"<pre><code>get_random_quote(\n    max_quotes_to_process: (\n        int | None\n    ) = MAX_QUOTES_FOR_RANDOM_SET,\n) -&gt; Any | None\n</code></pre> <p>This actually not all that random. It's going to grab the quotes ordered ordered by how infrequently they've been returned, and then grab a random one in the set. But for our purposes, it's fine. If there aren't any quotes, it will return None.</p> <p>Parameters:</p> Name Type Description Default <code>max_quotes_to_process</code> <code>int | None</code> <p>Maximum number of quotes to retrive before selecting at random.</p> <code>MAX_QUOTES_FOR_RANDOM_SET</code> <p>Returns:</p> Type Description <code>Quote | None</code> <p>The quote object or None if no quotes found.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def get_random_quote(self, max_quotes_to_process: int | None = MAX_QUOTES_FOR_RANDOM_SET) -&gt; Any | None:\n    \"\"\"\n    This actually not all that random. It's going to grab the quotes\n    ordered ordered by how infrequently they've been returned, and then grab a random one\n    in the set. But for our purposes, it's fine. If there aren't any quotes, it will return None.\n\n    Args:\n        max_quotes_to_process (int | None): Maximum number of quotes to retrive before\n            selecting at random.\n\n    Returns:\n        (Quote | None): The quote object or None if no quotes found.\n    \"\"\"\n    quotes_to_pick = (\n        Quote.objects.filter(source=self)\n        .filter(models.Q(pub_date__isnull=True) | models.Q(pub_date__lte=timezone.now()))\n        .select_related(\"stats\")\n        .order_by(\"stats__times_used\")[:max_quotes_to_process]\n    )\n    if quotes_to_pick.exists():\n        # Select a random index in the result set.\n        quote_to_return = random.choice(list(quotes_to_pick))  # noqa: S311\n        quote_random_retrieved.send(type(self), instance=self, quote_retrieved=quote_to_return)\n        return quote_to_return\n    return None\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Save and create slug, if missing.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Save and create slug, if missing.\"\"\"\n    if not self.slug:\n        self.slug = generate_unique_slug_for_model(type(self), text=f\"{self.group.slug} {self.name}\")\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.Source.update_markov_model","title":"update_markov_model","text":"<pre><code>update_markov_model() -&gt; None\n</code></pre> <p>Sync wrapper around <code>aupdate_markov_model</code>.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def update_markov_model(self) -&gt; None:\n    \"\"\"\n    Sync wrapper around `aupdate_markov_model`.\n    \"\"\"\n    async_to_sync(self.aupdate_markov_model)()\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup","title":"SourceGroup","text":"<p>             Bases: <code>AbstractOwnerModel</code>, <code>RulesModelMixin</code>, <code>TimeStampedModel</code></p> <p>An abstract group or source for a given set of quotes. Multiple sources, or Source objects, can belong to the same group. For example, a novel or series if you plan to quote the characters within individually.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Database primary key for the object.</p> <code>name</code> <code>str</code> <p>Human readable string to name the group. This will be converted to a slug prefix.</p> <code>description</code> <code>str</code> <p>A description of the group for convenience. Markdown can be used here for styling.</p> <code>description_rendered</code> <code>str</code> <p>The HTML representation of the description string. Generated automatically.</p> <code>owner</code> <code>User</code> <p>The user that created the group and therefore owns it.</p> <code>public</code> <code>bool</code> <p>Is this group public or private. Defaults to False.</p> <code>allow_submissions</code> <code>bool</code> <p>Allow other users to submit characters to this. Not yet implemented.</p> <code>slug</code> <code>str</code> <p>A unique slug to represent this group. Generated automatically from name.</p> <code>created</code> <code>datetime</code> <p>When this object was first created. Auto-generated.</p> <code>modified</code> <code>datetime</code> <p>Last time this object was modified. Auto-generated.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.aupdate_markov_model","title":"aupdate_markov_model  <code>async</code>","text":"<pre><code>aupdate_markov_model() -&gt; None\n</code></pre> <p>Updates the related MarkovTextModel.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>async def aupdate_markov_model(self) -&gt; None:\n    \"\"\"Updates the related MarkovTextModel.\"\"\"\n    if self.text_model is not None:\n        markov_sources = self.source_set.filter(allow_markov=True)\n        if await markov_sources.aexists():\n            quotes = Quote.objects.filter(source__in=markov_sources)\n            await self.text_model.aupdate_model_from_corpus(corpus_entries=[quote.quote async for quote in quotes])\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.generate_markov_sentence","title":"generate_markov_sentence","text":"<pre><code>generate_markov_sentence(\n    max_characters: int = 280, tries: int = 20\n) -&gt; str | None\n</code></pre> <p>Generate a markov sentence based on quotes from markov enabled characters for the group.</p> <p>Parameters:</p> Name Type Description Default <code>max_characters</code> <code>int</code> <p>Maximum characters allowed in the resulting sentence.</p> <code>280</code> <code>tries</code> <code>int</code> <p>Maximum number of tries django_markov should use to create the sentence.</p> <code>20</code> <p>Returns:</p> Type Description <code>str | None</code> <p>The generated sentence or None if no sentence was possible for the number of tries.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def generate_markov_sentence(self, max_characters: int = 280, tries: int = 20) -&gt; str | None:\n    \"\"\"\n    Generate a markov sentence based on quotes from markov enabled characters for the group.\n\n    Args:\n        max_characters (int): Maximum characters allowed in the resulting sentence.\n        tries (int): Maximum number of tries django_markov should use to create the sentence.\n\n    Returns:\n        (str | None): The generated sentence or None if no sentence was possible for the number\n            of tries.\n    \"\"\"\n    if self.markov_ready and self.text_model is not None:\n        logger.debug(\"Group is ready for markov sentences. Checking model...\")\n        mmodel = self.text_model\n        if not mmodel.is_ready:\n            logger.debug(\"Markov model for group is not generated yet! Generating...\")\n            self.update_markov_model()\n            mmodel.refresh_from_db()\n        logger.debug(\"Generating sentence...\")\n        sentence: str | None = mmodel.generate_sentence(char_limit=max_characters, tries=tries)\n        if sentence is not None:\n            logger.debug(f\"Returning generated sentence: '{sentence}'\")\n            return sentence\n    logger.debug(\"Group is not ready for markov requests yet!\")\n    return None\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.get_random_quote","title":"get_random_quote","text":"<pre><code>get_random_quote(\n    max_quotes_to_process: (\n        int | None\n    ) = MAX_QUOTES_FOR_RANDOM_GROUP_SET,\n) -&gt; Any\n</code></pre> <p>Get a random quote object from any of the characters defined within the group. Prioritizes quotes that have been returned less often.</p> <p>Parameters:</p> Name Type Description Default <code>max_quotes_to_process</code> <code>int | None</code> <p>Maximum number of quotes to retrieve before selecting a random one.</p> <code>MAX_QUOTES_FOR_RANDOM_GROUP_SET</code> <p>Returns:</p> Type Description <code>Any</code> <p>(Quote | None) Quote object or None if no quotes are found.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def get_random_quote(self, max_quotes_to_process: int | None = MAX_QUOTES_FOR_RANDOM_GROUP_SET) -&gt; Any:\n    \"\"\"\n    Get a random quote object from any of the characters defined within the group.\n    Prioritizes quotes that have been returned less often.\n\n    Args:\n        max_quotes_to_process (int | None): Maximum number of quotes to retrieve before\n            selecting a random one.\n\n    Returns:\n         (Quote | None) Quote object or None if no quotes are found.\n    \"\"\"\n    # TODO: Create Q object to filter for null datetimes or less than now.\n    quotes = (\n        Quote.objects.filter(source__in=self.source_set.all())\n        .filter(models.Q(pub_date__isnull=True) | models.Q(pub_date__lte=timezone.now()))\n        .select_related(\"stats\")\n        .order_by(\"stats__times_used\")[:max_quotes_to_process]\n    )\n    if quotes.exists():\n        quote = random.choice(list(quotes))  # noqa: S311\n        quote_random_retrieved.send(type(quote.source), instance=quote.source, quote_retrieved=quote)\n        return quote\n    return None\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.markov_ready","title":"markov_ready","text":"<pre><code>markov_ready() -&gt; bool\n</code></pre> <p>Checks to see if there are Markov enabled sources and sufficient quotes.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>@cached_property\ndef markov_ready(self) -&gt; bool:\n    \"\"\"Checks to see if there are Markov enabled sources and sufficient quotes.\"\"\"\n    if (\n        self.markov_sources &gt; 0 and self.text_model is not None\n        and Quote.objects.filter(source__in=self.source_set.filter(allow_markov=True)).count() &gt; 10  # noqa:PLR2004\n    ):\n        return True\n    return False\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.markov_sources","title":"markov_sources","text":"<pre><code>markov_sources() -&gt; int\n</code></pre> <p>Total number of Markov sources for the group.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>@cached_property\ndef markov_sources(self) -&gt; int:\n    \"\"\"Total number of Markov sources for the group.\"\"\"\n    return Source.objects.filter(group=self, allow_markov=True).count()\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.refresh_from_db","title":"refresh_from_db","text":"<pre><code>refresh_from_db(*args, **kwargs)\n</code></pre> <p>Also reset cached properties.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def refresh_from_db(self, *args, **kwargs):\n    \"\"\"\n    Also reset cached properties.\n    \"\"\"\n    super().refresh_from_db(*args, **kwargs)\n    cached_properties = [\"total_sources\", \"markov_sources\", \"total_quotes\"]\n    for prop in cached_properties:\n        try:\n            del self.__dict__[prop]\n        except KeyError:  # pragma: nocover\n            pass\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.save","title":"save","text":"<pre><code>save(*args, **kwargs)\n</code></pre> <p>Save and create slug if missing.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Save and create slug if missing.\"\"\"\n    if not self.slug:  # Once this slug is set, it does not change except through devil pacts\n        logger.debug(\"Group is being saved and a slug was provided.\")\n        self.slug = generate_unique_slug_for_model(model_class=type(self), text=self.name)\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.total_quotes","title":"total_quotes","text":"<pre><code>total_quotes() -&gt; int\n</code></pre> <p>Total quotes for the group.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>@cached_property\ndef total_quotes(self) -&gt; int:\n    \"\"\"Total quotes for the group.\"\"\"\n    return Quote.objects.filter(source__in=Source.objects.filter(group=self)).count()\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.total_sources","title":"total_sources","text":"<pre><code>total_sources() -&gt; int\n</code></pre> <p>Total number of sources for the group.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>@cached_property\ndef total_sources(self) -&gt; int:\n    \"\"\"Total number of sources for the group.\"\"\"\n    return Source.objects.filter(group=self).count()\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceGroup.update_markov_model","title":"update_markov_model","text":"<pre><code>update_markov_model() -&gt; None\n</code></pre> <p>Updates the related MarkovTextModel.</p> Source code in <code>src/django_quotes/models.py</code> <pre><code>def update_markov_model(self) -&gt; None:\n    \"\"\"Updates the related MarkovTextModel.\"\"\"\n    async_to_sync(self.aupdate_markov_model)()\n</code></pre>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.SourceStats","title":"SourceStats","text":"<p>             Bases: <code>TimeStampedModel</code></p> <p>An object for using to track usage stats for <code>Character</code>.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>Source</code> <p>The source this is collecting stats for.</p> <code>quotes_requested</code> <code>int</code> <p>The number of times a quote from this object or its children has been requested.</p> <code>quotes_generated</code> <code>int</code> <p>The number of times a markov quote has been generated for this or it's children.</p>"},{"location":"reference/django_quotes/models/#src.django_quotes.models.TimeStampedModel","title":"TimeStampedModel","text":"<p>             Bases: <code>Model</code></p> <p>Automatically adds a created and modified field.</p>"},{"location":"reference/django_quotes/receivers/","title":"receivers","text":""},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.initialize_group_markov_object","title":"initialize_group_markov_object","text":"<pre><code>initialize_group_markov_object(\n    sender, instance, *args, **kwargs\n)\n</code></pre> <p>Creates the one-to-one object for the group markov model.</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(pre_save, sender=SourceGroup)\ndef initialize_group_markov_object(sender, instance, *args, **kwargs):\n    \"\"\"\n    Creates the one-to-one object for the group markov model.\n    \"\"\"\n    if not instance.text_model:\n        instance.text_model = MarkovTextModel.objects.create()\n</code></pre>"},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.initialize_grouping_stat_object","title":"initialize_grouping_stat_object","text":"<pre><code>initialize_grouping_stat_object(\n    sender, instance, created, *args, **kwargs\n)\n</code></pre> <p>Creates the initial stat objects in the database.</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(post_save, sender=SourceGroup)\n@receiver(post_save, sender=Source)\n@receiver(post_save, sender=Quote)\ndef initialize_grouping_stat_object(sender, instance, created, *args, **kwargs):\n    \"\"\"\n    Creates the initial stat objects in the database.\n    \"\"\"\n    if created:\n        if sender == SourceGroup:\n            GroupStats.objects.create(group=instance)\n        elif sender == Source:\n            SourceStats.objects.create(source=instance)\n        elif sender == Quote:\n            QuoteStats.objects.create(quote=instance)\n</code></pre>"},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.initialize_markov_object","title":"initialize_markov_object","text":"<pre><code>initialize_markov_object(sender, instance, *args, **kwargs)\n</code></pre> <p>Creates the one-to-one object to accompany the source object.</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(pre_save, sender=Source)\ndef initialize_markov_object(sender, instance, *args, **kwargs):\n    \"\"\"\n    Creates the one-to-one object to accompany the source object.\n    \"\"\"\n    if not instance.text_model:\n        instance.text_model = MarkovTextModel.objects.create()\n</code></pre>"},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.render_description","title":"render_description","text":"<pre><code>render_description(sender, instance, *args, **kwargs)\n</code></pre> <p>Automatically renders the description from markdown.</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(pre_save, sender=SourceGroup)\n@receiver(pre_save, sender=Source)\ndef render_description(sender, instance, *args, **kwargs):\n    \"\"\"\n    Automatically renders the description from markdown.\n    \"\"\"\n    if instance.description:\n        instance.description_rendered = markdown(instance.description)\n    else:\n        instance.description_rendered = None\n</code></pre>"},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.render_quote","title":"render_quote","text":"<pre><code>render_quote(sender, instance, *args, **kwargs)\n</code></pre> <p>Render the quote via markdown and save the results.</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(pre_save, sender=Quote)\ndef render_quote(sender, instance, *args, **kwargs):\n    \"\"\"\n    Render the quote via markdown and save the results.\n    \"\"\"\n    instance.quote_rendered = markdown(instance.quote)\n</code></pre>"},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.update_stats_for_markov","title":"update_stats_for_markov","text":"<pre><code>update_stats_for_markov(\n    sender, instance, char_limit, sentence, *args, **kwargs\n)\n</code></pre> <p>For a given source, update the stats on the Source and SourceGroup for markov requests. :param sender: The requesting class, usually Source. :param instance: The specific source requested. :param char_limit: The character limit used when generating the sentence. :param sentence: The sentence that was generated. :return: None</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(sentence_generated, sender=MarkovTextModel)\ndef update_stats_for_markov(sender, instance, char_limit, sentence, *args, **kwargs):\n    \"\"\"\n    For a given source, update the stats on the Source and SourceGroup for markov requests.\n    :param sender: The requesting class, usually Source.\n    :param instance: The specific source requested.\n    :param char_limit: The character limit used when generating the sentence.\n    :param sentence: The sentence that was generated.\n    :return: None\n    \"\"\"\n    try:\n        source = Source.objects.get(text_model__pk=instance.pk)\n        group = source.group\n    except ObjectDoesNotExist:\n        # this is a group model\n        source = None\n        group = SourceGroup.objects.get(text_model__pk=instance.pk)\n    group_stats = group.stats\n    source_stats = source.stats if source else None\n    with transaction.atomic():\n        group_stats.quotes_generated = F(\"quotes_generated\") + 1\n        group_stats.save()\n        if source_stats is not None:\n            source_stats.quotes_generated = F(\"quotes_generated\") + 1\n            source_stats.save()\n</code></pre>"},{"location":"reference/django_quotes/receivers/#src.django_quotes.receivers.update_stats_for_quote_character","title":"update_stats_for_quote_character","text":"<pre><code>update_stats_for_quote_character(\n    sender, instance, quote_retrieved, *args, **kwargs\n)\n</code></pre> <p>Update the stats for the source, source group, and quote for a random retrieval. :param sender: Usually a source or sourcegroup class. :param instance: The source this was generated for. :param quote_retrieved: The quote that was returned. :return: None</p> Source code in <code>src/django_quotes/receivers.py</code> <pre><code>@receiver(quote_random_retrieved, sender=Source)\ndef update_stats_for_quote_character(sender, instance, quote_retrieved, *args, **kwargs):\n    \"\"\"\n    Update the stats for the source, source group, and quote for a random retrieval.\n    :param sender: Usually a source or sourcegroup class.\n    :param instance: The source this was generated for.\n    :param quote_retrieved: The quote that was returned.\n    :return: None\n    \"\"\"\n    group_stats = instance.group.stats\n    character_stats = instance.stats\n    quote_stats = quote_retrieved.stats\n    with transaction.atomic():\n        group_stats.quotes_requested = F(\"quotes_requested\") + 1\n        group_stats.save()\n        character_stats.quotes_requested = F(\"quotes_requested\") + 1\n        character_stats.save()\n        quote_stats.times_used = F(\"times_used\") + 1\n        quote_stats.save()\n</code></pre>"},{"location":"reference/django_quotes/rules/","title":"rules","text":"<p>Access control rules.</p>"},{"location":"reference/django_quotes/rules/#src.django_quotes.rules.allows_submissions","title":"allows_submissions","text":"<pre><code>allows_submissions(user, obj)\n</code></pre> <p>Check if the object allows submissions.</p> Source code in <code>src/django_quotes/rules.py</code> <pre><code>@rules.predicate\ndef allows_submissions(user, obj):\n    \"\"\"Check if the object allows submissions.\"\"\"\n    return obj.allow_submissions\n</code></pre>"},{"location":"reference/django_quotes/rules/#src.django_quotes.rules.is_group_owner","title":"is_group_owner","text":"<pre><code>is_group_owner(user, obj)\n</code></pre> <p>Check if the object's group is owned by the user.</p> Source code in <code>src/django_quotes/rules.py</code> <pre><code>@rules.predicate\ndef is_group_owner(user, obj):\n    \"\"\"Check if the object's group is owned by the user.\"\"\"\n    return user == obj.group.owner\n</code></pre>"},{"location":"reference/django_quotes/rules/#src.django_quotes.rules.is_owner","title":"is_owner","text":"<pre><code>is_owner(user, obj)\n</code></pre> <p>Check if the user is the owner of the object.</p> Source code in <code>src/django_quotes/rules.py</code> <pre><code>@rules.predicate\ndef is_owner(user, obj):\n    \"\"\"Check if the user is the owner of the object.\"\"\"\n    return obj.owner == user\n</code></pre>"},{"location":"reference/django_quotes/rules/#src.django_quotes.rules.is_public","title":"is_public","text":"<pre><code>is_public(user, obj)\n</code></pre> <p>Check if the object is public.</p> Source code in <code>src/django_quotes/rules.py</code> <pre><code>@rules.predicate\ndef is_public(user, obj):\n    \"\"\"Check if the object is public.\"\"\"\n    return obj.public\n</code></pre>"},{"location":"reference/django_quotes/rules/#src.django_quotes.rules.is_source_owner","title":"is_source_owner","text":"<pre><code>is_source_owner(user, obj)\n</code></pre> <p>Check that the quote source is owned by the user.</p> Source code in <code>src/django_quotes/rules.py</code> <pre><code>@rules.predicate\ndef is_source_owner(user, obj):\n    \"\"\"Check that the quote source is owned by the user.\"\"\"\n    return user == obj.source.owner\n</code></pre>"},{"location":"reference/django_quotes/signals/","title":"signals","text":"<p>Defines signals</p> <p>quote_random_retrieved is emitted when a random quote is supplied.</p> <p>The <code>sender</code> should in most contexts be either <code>Source</code> or <code>SourceGroup</code>  class definitions (not instances). The <code>instance</code> should be the actual instance of the <code>Source</code> that is being used.</p> <p>This signal will update the <code>quotes_retrieved</code> stats in the related <code>GroupStats</code>, <code>SourceStats</code>, and <code>QuoteStats</code> objects.</p>"},{"location":"reference/django_quotes/urls/","title":"urls","text":"<p>Url patterns for application.</p>"},{"location":"reference/django_quotes/utils/","title":"utils","text":""},{"location":"reference/django_quotes/utils/#src.django_quotes.utils.generate_unique_slug_for_model","title":"generate_unique_slug_for_model","text":"<pre><code>generate_unique_slug_for_model(\n    model_class: type[Model],\n    text: str,\n    slug_field: str | None = \"slug\",\n    max_length_override: int | None = None,\n) -&gt; str\n</code></pre> <p>Generate a unique slug for the given model.</p> <p>Parameters:</p> Name Type Description Default <code>model_class</code> <code>Model</code> <p>A class based upon <code>django.db.models.Model</code></p> required <code>text</code> <code>str</code> <p>Text to convert to a slug.</p> required <code>slug_field</code> <code>str | None</code> <p>The name of the slug field of the model.</p> <code>'slug'</code> <code>max_length_override</code> <code>int | None</code> <p>Maximum number of characters to use if not the same as what's defined in the slug field.</p> <code>None</code> <p>Returns:      (str): The generated slug.</p> Source code in <code>src/django_quotes/utils.py</code> <pre><code>def generate_unique_slug_for_model(\n    model_class: type[Model],\n    text: str,\n    slug_field: str | None = \"slug\",\n    max_length_override: int | None = None,\n) -&gt; str:\n    \"\"\"\n    Generate a unique slug for the given model.\n\n    Args:\n        model_class (Model): A class based upon ``django.db.models.Model``\n        text (str): Text to convert to a slug.\n        slug_field (str | None): The name of the slug field of the model.\n        max_length_override (int | None): Maximum number of characters to use\n            if not the same as what's defined in the slug field.\n    Returns:\n         (str): The generated slug.\n    \"\"\"\n    unique_found: bool = False\n    has_next: bool = False\n    next_val: int = 0\n    if not max_length_override:\n        logger.debug(\"Setting max_length of slug from field definition.\")\n        max_length: int = model_class._meta.get_field(slug_field).max_length  # type: ignore\n    else:\n        logger.debug(\"User override value for max length of slug.\")\n        max_length = max_length_override\n    slug = slugify(text, max_length=max_length)\n    logger.debug(f\"Base slug is set to '{slug}'.\")\n    while not unique_found:\n        logger.debug(f\"Testing uniqueness of slug '{slug}'...\")\n        try:\n            model_class.objects.get(**{str(slug_field): slug})\n        except ObjectDoesNotExist:\n            logger.debug(\"Slug is unique!\")\n            unique_found = True\n        if not unique_found:\n            logger.debug(\"Slug is not unique yet.\")\n            next_val += 1\n            if has_next:\n                slug = slug[len(slug) - (len(str(next_val - 1)) - 1) :]\n            if len(slug) &gt;= max_length:\n                slug = slug[: max_length - (len(str(next_val)) + 1)]\n            slug = slug + f\"-{next_val}\"\n            has_next = True\n    return slug\n</code></pre>"},{"location":"reference/django_quotes/views/","title":"views","text":""},{"location":"reference/django_quotes/views/#src.django_quotes.views.QuoteCreateView","title":"QuoteCreateView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>View for adding a quote to a source.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/quotes/add/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.QuoteDeleteView","title":"QuoteDeleteView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DeleteView</code></p> <p>View to delete a quote.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/quotes/[quote_id]/delete/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.QuoteDetailView","title":"QuoteDetailView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DetailView</code></p> <p>A quote detail view for use in things like previewing render or viewing statistics.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/quotes/[quote_id]/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.QuoteListView","title":"QuoteListView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>ListView</code></p> <p>View for viewing quotes from a specific source.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/quotes/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.QuoteUpdateView","title":"QuoteUpdateView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>UpdateView</code></p> <p>View for updating a quote.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/quotes/[quote_id]/edit/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceCreateView","title":"SourceCreateView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>Create a new source and add them to a source group.</p> <p>Available at /groups/[group_slug]/sources/add/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceDeleteView","title":"SourceDeleteView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DeleteView</code></p> <p>Used to delete a given Source</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/delete/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceDetailView","title":"SourceDetailView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DetailView</code></p> <p>Shows information about the specified source.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceGroupCreateView","title":"SourceGroupCreateView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>CreateView</code></p> <p>Create a new source group.</p> <p>Available at /groups/create/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceGroupDeleteView","title":"SourceGroupDeleteView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DeleteView</code></p> <p>Delete and existing source group.</p> <p>Available at /groups/[group_slug]/delete/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceGroupDetailView","title":"SourceGroupDetailView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>DetailView</code></p> <p>Displays details for a source group.</p> <p>Available at /groups/[group_slug]/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceGroupListView","title":"SourceGroupListView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>ListView</code></p> <p>Displays Source Groups owned by the user. TODO: For now, only user owned groups, we won't bother with public options.</p> <p>Available at /groups/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceGroupUpdateView","title":"SourceGroupUpdateView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>UpdateView</code></p> <p>Update an existing source group</p> <p>Available at /groups/[group_slug]/edit/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceListView","title":"SourceListView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>ListView</code></p> <p>Display a list of sources for a given group.</p> <p>Available at /groups/[group_slug]/sources/</p>"},{"location":"reference/django_quotes/views/#src.django_quotes.views.SourceUpdateView","title":"SourceUpdateView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>PermissionRequiredMixin</code>, <code>UpdateView</code></p> <p>Allows editing and updating of a Source.</p> <p>Available at /groups/[group_slug]/sources/[source_slug]/edit/</p>"},{"location":"reference/django_quotes/api/serializers/","title":"serializers","text":""},{"location":"reference/django_quotes/api/serializers/#src.django_quotes.api.serializers.QuoteSerializer","title":"QuoteSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Serializer for Quote.</p> <p>Includes the following fields:</p> <ul> <li>quote (str)</li> <li>quote_rendered (str)</li> <li>source (SourceSerializer)</li> <li>citation (str)</li> <li>citation_url (str)</li> </ul>"},{"location":"reference/django_quotes/api/serializers/#src.django_quotes.api.serializers.SourceGroupSerializer","title":"SourceGroupSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Serializer for SourceGroup.</p> <p>Includes the following fields:</p> <ul> <li>name (str)</li> <li>slug (str)</li> <li>description (str)</li> <li>description_rendered (str)</li> </ul>"},{"location":"reference/django_quotes/api/serializers/#src.django_quotes.api.serializers.SourceSerializer","title":"SourceSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Serializer for Source.</p> <p>Includes the following fields:</p> <ul> <li>name (str)</li> <li>group (SourceGroupSerializer)</li> <li>slug (str)</li> <li>description (str)</li> <li>description_rendered (str)</li> </ul>"},{"location":"reference/django_quotes/api/views/","title":"views","text":""},{"location":"reference/django_quotes/api/views/#src.django_quotes.api.views.SourceGroupViewSet","title":"SourceGroupViewSet","text":"<p>             Bases: <code>AutoPermissionViewSetMixin</code>, <code>RetrieveModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>A generic viewset for listing and retrieving details on sourceGroup groups.</p>"},{"location":"reference/django_quotes/api/views/#src.django_quotes.api.views.SourceViewSet","title":"SourceViewSet","text":"<p>             Bases: <code>AutoPermissionViewSetMixin</code>, <code>RetrieveModelMixin</code>, <code>ListModelMixin</code>, <code>GenericViewSet</code></p> <p>Retrieve and list views for sources.</p>"},{"location":"reference/django_quotes/management/commands/makemarkov/","title":"makemarkov","text":"<p>Checks if markov models are out of date, and if so regenerates them.</p>"}]}